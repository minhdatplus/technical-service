// Generated by delombok at Wed May 26 23:25:48 ICT 2021
package ai.caria.historical.app.io.translator.app;

import ai.caria.historical.app.io.translator.Request;
import ai.caria.historical.app.io.translator.RequestTranslator;
import ai.caria.historical.commons.datetime.DateTimeUtils;
import ai.caria.historical.message.HistoricalRequest;
import ai.caria.historical.message.impl.AdjustedRateRequest;
import ai.caria.historical.message.impl.StockDataRequest;
import io.gridgo.bean.BObject;
import io.gridgo.framework.support.Message;
import io.gridgo.utils.pojo.helper.FunctionAccessor;
import io.gridgo.utils.pojo.helper.MethodAccessors;
import org.cliffc.high_scale_lib.NonBlockingHashMap;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Map;

public class HistoricalHttpRequestTranslator implements RequestTranslator {
    @java.lang.SuppressWarnings("all")
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(HistoricalHttpRequestTranslator.class);
    private Map<Class<? extends HistoricalRequest>, FunctionAccessor> factory = new NonBlockingHashMap<>();

    public HistoricalHttpRequestTranslator() {
        java.lang.reflect.Method[] methods = getClass().getDeclaredMethods();
        for (Method method : methods) {
            if (!isValidAnnotatedMethod(method)) continue;
            ai.caria.historical.app.io.translator.Request annotation = method.getAnnotation(Request.class);
            io.gridgo.utils.pojo.helper.FunctionAccessor functionAccessor = MethodAccessors.forStaticSingleParamFunction(method);
            factory.put(annotation.value(), functionAccessor);
        }
    }

    private boolean isValidAnnotatedMethod(Method method) {
        return method.isAnnotationPresent(Request.class) && Modifier.isStatic(method.getModifiers()) && Modifier.isPublic(method.getModifiers());
    }

    @Request(AdjustedRateRequest.class)
    public static HistoricalRequest adjustedRequest(Message message) {
        io.gridgo.bean.BObject body = body(message);
        return AdjustedRateRequest.builder().fromDate(DateTimeUtils.date(body.getString("from_date"))).toDate(DateTimeUtils.date(body.getString("to_date"))).build();
    }

// interval > 24*60
    @Request(StockDataRequest.class)
    public static HistoricalRequest dailyStockInfo(Message message) {
        io.gridgo.bean.BObject body = body(message);
        return StockDataRequest.builder().symbol(body.getString("symbol")).from(body.getString("from")).to(body.getString("to")).interval(Double.parseDouble(body.getString("interval"))).build();
    }

    @Override
    public HistoricalRequest translate(Message message, Class<? extends HistoricalRequest> target) {
        return (HistoricalRequest) factory.get(target).apply(message);
    }

    private static BObject body(Message message) {
        return message.body().asObject();
    }
}
