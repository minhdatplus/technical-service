// Generated by delombok at Wed May 26 23:25:48 ICT 2021
package ai.caria.historical.app;

import ai.caria.cognac.config.PropertiesConfigReader;
import ai.caria.historical.app.io.ConnectorRegistry;
import ai.caria.historical.app.io.HealthCheck;
import ai.caria.historical.app.io.HistoricalAppConnectors;
import ai.caria.historical.app.io.StatisticsHandler;
import ai.caria.historical.app.io.translator.HttpExceptionTranslator;
import ai.caria.historical.app.io.translator.app.HistoricalHttpRequestTranslator;
import ai.caria.historical.app.io.translator.app.HistoricalHttpResponseTranslator;
import ai.caria.historical.core.HistoricalContext;
import ai.caria.historical.core.handler.HistoricalHandler;
import io.gridgo.bean.BObject;
import lombok.NonNull;
import java.io.IOException;
import static io.gridgo.utils.ThreadUtils.registerShutdownTask;
import static lombok.AccessLevel.PRIVATE;

public class HistoricalApplication {
    @java.lang.SuppressWarnings("all")
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(HistoricalApplication.class);
    private static final String APP_CONFIG_FILE_PATH = "config/application.properties";
    private static final String GROUP_ID = "group.id";

    private static HistoricalAppConfig loadConfig(String[] args) throws Exception {
        return  //
        //
        PropertiesConfigReader.forType(HistoricalAppConfig.class).readProperties(APP_CONFIG_FILE_PATH);
    }

    public static void main(String[] args) {
        ai.caria.historical.app.HistoricalApplication historicalApp = standalone();
        try {
            historicalApp.start(); // run the app...hope to have a happy life!!!
        } catch (Exception e) {
            log.error("Cannot start historicalApp application", e);
            historicalApp.stop();
            return;
        }
        registerShutdownTask(historicalApp::stop);
    }

    public static HistoricalApplication standalone(String... args) {
        HistoricalAppConfig config;
        try {
            config = loadConfig(args);
            log.debug(BObject.ofPojo(config).toJson());
        } catch (Exception e) {
            log.error("Error while loading config file", e);
            return null;
        }
        return HistoricalApplication.builder().config(config).build();
    }

    @NonNull
    private final HistoricalAppConfig config;
    private ConnectorRegistry connectorRegistry;

    public void start() throws IOException {
        ai.caria.historical.core.HistoricalContext context = new HistoricalAppInitializer(config).init();
        publishHttpEndpoint(context);
        publishStatisticEndpoint();
        publishHealthCheckEndpoint();
    }

    private void publishHttpEndpoint(HistoricalContext context) {
        ai.caria.historical.core.handler.HistoricalHandler handler = HistoricalHandler.newInstance(context);
        connectorRegistry = ConnectorRegistry.builder().HistoricalHandler(handler).httpEndpoint(config.getHttpEndpoint()).connectorRegistry(HistoricalAppConnectors.class).requestTranslator(new HistoricalHttpRequestTranslator()).responseTranslator(new HistoricalHttpResponseTranslator()).exceptionTranslator(new HttpExceptionTranslator()).build();
        connectorRegistry.start();
    }

    public void stop() {
        if (connectorRegistry != null) connectorRegistry.stop();
    }

    private void publishStatisticEndpoint() {
        if (config.getStatisticEndpoint() != null) {
            ai.caria.historical.app.io.StatisticsHandler statisticHandler = StatisticsHandler.of(config.getAppName(), config.getStatisticEndpoint());
            statisticHandler.start();
            registerShutdownTask(statisticHandler::stop);
        }
    }

    private void publishHealthCheckEndpoint() {
        if (config.getHealthCheckEndpoint() != null) {
            ai.caria.historical.app.io.HealthCheck healthCheckEndpoint = HealthCheck.of(config.getHealthCheckEndpoint());
            healthCheckEndpoint.start();
            registerShutdownTask(healthCheckEndpoint::stop);
            log.info("Health check API started");
        }
    }


    @java.lang.SuppressWarnings("all")
    public static class HistoricalApplicationBuilder {
        @java.lang.SuppressWarnings("all")
        private HistoricalAppConfig config;
        @java.lang.SuppressWarnings("all")
        private ConnectorRegistry connectorRegistry;

        @java.lang.SuppressWarnings("all")
        HistoricalApplicationBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public HistoricalApplicationBuilder config(final HistoricalAppConfig config) {
            this.config = config;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public HistoricalApplicationBuilder connectorRegistry(final ConnectorRegistry connectorRegistry) {
            this.connectorRegistry = connectorRegistry;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public HistoricalApplication build() {
            return new HistoricalApplication(config, connectorRegistry);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "HistoricalApplication.HistoricalApplicationBuilder(config=" + this.config + ", connectorRegistry=" + this.connectorRegistry + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static HistoricalApplicationBuilder builder() {
        return new HistoricalApplicationBuilder();
    }

    @java.lang.SuppressWarnings("all")
    private HistoricalApplication(@NonNull final HistoricalAppConfig config, final ConnectorRegistry connectorRegistry) {
        if (config == null) {
            throw new java.lang.NullPointerException("config is marked @NonNull but is null");
        }
        this.config = config;
        this.connectorRegistry = connectorRegistry;
    }
}
